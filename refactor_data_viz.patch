diff --git a/src/client/common/components/Visualization/Visualization.js b/src/client/common/components/Visualization/Visualization.js
index d1703992..e7ec63ec 100644
--- a/src/client/common/components/Visualization/Visualization.js
+++ b/src/client/common/components/Visualization/Visualization.js
@@ -2,7 +2,8 @@ import { useEffect, useState } from "react";
 import React from "react";
 import axios from "axios";
 import Plot from "react-plotly.js";
-import { transformData } from "./Transformers/countComplaintsByIntakeSource";
+import * as countComplaintsByIntakeSource from "./Transformers/countComplaintsByIntakeSource";
+import {QUERY_TYPES} from "../../../../sharedUtilities/constants";
 
 export function Visualization(props) {
   const [data, setData] = useState({ data: {}, isFetching: false });
@@ -13,7 +14,16 @@ export function Visualization(props) {
         const response = await axios.get(
           `/api/data?queryType=${props.queryType}`
         );
-        const transformedData = transformData(response.data);
+        let transformedData;
+        switch (props.queryType) {
+          case QUERY_TYPES.COUNT_COMPLAINTS_BY_INTAKE_SOURCE:
+            transformedData = countComplaintsByIntakeSource.transformData(response.data);
+            break;
+
+          default:
+
+        }
+
         setData({ data: transformedData, isFetching: false });
       } catch (e) {
         console.log(e);
diff --git a/src/server/handlers/data/getData.js b/src/server/handlers/data/getData.js
index 5eb7c322..1e5c184d 100644
--- a/src/server/handlers/data/getData.js
+++ b/src/server/handlers/data/getData.js
@@ -8,6 +8,14 @@ const getData = asyncMiddleware(async (request, response, next) => {
   let data;
   const queryType = request.query.queryType;
 
+  try {
+    data = eval(`import * as ${queryType} from "./queries/${queryType}"; await ${queryType}.executeQuery();`)
+  } catch (err) {
+    return next(
+        Boom.badRequest(BAD_REQUEST_ERRORS.DATA_QUERY_TYPE_NOT_SUPPORTED)
+    );
+  }
+
   switch (queryType) {
     case QUERY_TYPES.COUNT_COMPLAINTS_BY_INTAKE_SOURCE:
       data = await countComplaintsByIntakeSource.executeQuery();
