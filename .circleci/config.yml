version: 2.1
parameters:
  prod-branch:
    type: string
    default: "release_v3.39.1"
  stage-branch:
    type: string
    default: "release_v3.39.1"
  instance-files-image-name:
    type: string
    default: "noipm/instance-files"
  instance-files-version:
    type: string
    default: "1.0.7"
  ubuntu-version:
    type: string
    default: "2.0.2"

jobs:
  get-instance-files-latest:
    docker:
      - image: docker:stable
    steps:
      - setup_remote_docker
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Copies instance files from temp container
          command: docker cp $(docker create --name temp-container << pipeline.parameters.instance-files-image-name >>:latest):/instance-files instance-files/
      - run:
          name: Removes temporary container
          command: docker rm temp-container
      - persist_to_workspace:
          root: .
          paths: instance-files/*

  get-instance-files-release:
    docker:
      - image: docker:stable
    steps:
      - setup_remote_docker
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker pull << pipeline.parameters.instance-files-image-name >>:<< pipeline.parameters.instance-files-version >>
      - run:
          name: Copies instance files from temp container
          command: docker cp $(docker create --name temp-container << pipeline.parameters.instance-files-image-name >>:<< pipeline.parameters.instance-files-version >>):/instance-files instance-files/
      - run:
          name: Removes temporary container
          command: docker rm temp-container
      - persist_to_workspace:
          root: .
          paths: instance-files/*

  test-client:
    docker:
      - image: noipm/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
    steps:
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Run client unit tests
          command: yarn test:client:ci
          environment:
            NEW_RELIC_ENABLED: false
            NEW_RELIC_NO_CONFIG_FILE: true
  test-server-handlers-ci:
    docker:
      - image: noipm/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
      - image: postgres:10.9-alpine
    steps:
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Run server handler unit tests
          command: AWS_ACCESS_KEY_ID=$CI_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$CI_AWS_SECRET_ACCESS_KEY yarn test:server-handlers:ci
          environment:
            NEW_RELIC_ENABLED: false
            NEW_RELIC_NO_CONFIG_FILE: true
  test-server-handlers-staging:
    docker:
      - image: noipm/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
      - image: postgres:10.9-alpine
    steps:
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Run server handler unit tests
          command: AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY yarn test:server-handlers:ci
          environment:
            NEW_RELIC_ENABLED: false
            NEW_RELIC_NO_CONFIG_FILE: true
  test-server-worker-non-handlers:
    docker:
      - image: noipm/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
      - image: postgres:10.9-alpine
    steps:
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Run server and worker unit tests, excluding handlers
          command: yarn test:server-worker-non-handlers:ci
          environment:
            NEW_RELIC_ENABLED: false
            NEW_RELIC_NO_CONFIG_FILE: true

  security-check:
    docker:
      - image: hawkeyesec/scanner-cli:latest
    steps:
      - checkout
      - run: /bin/sh ./scripts/security-checks.sh
      - store_artifacts:
          path: hawkeye_report.json

  build-and-publish-master:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker build -f Dockerfile.web --build-arg REACT_APP_ENV=ci --build-arg REACT_APP_GOOGLE_API_KEY=$REACT_APP_GOOGLE_API_KEY_PREPROD --build-arg INSTANCE_VERSION=latest -t noipm/police-data-manager-ci:$CIRCLE_SHA1 .
      - run: docker build -f Dockerfile.worker --build-arg INSTANCE_VERSION=latest -t noipm/police-data-manager-ci-worker:$CIRCLE_SHA1 .
      - run: docker push noipm/police-data-manager-ci:$CIRCLE_SHA1
      - run: docker push noipm/police-data-manager-ci-worker:$CIRCLE_SHA1

  build-and-publish-release:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker build -f Dockerfile.web --build-arg REACT_APP_ENV=staging --build-arg REACT_APP_GOOGLE_API_KEY=$REACT_APP_GOOGLE_API_KEY_PREPROD --build-arg INSTANCE_VERSION=<< pipeline.parameters.instance-files-version >> -t noipm/police-data-manager-staging:$CIRCLE_SHA1 .
      - run: docker build -f Dockerfile.web --build-arg REACT_APP_ENV=production --build-arg REACT_APP_GOOGLE_API_KEY=$REACT_APP_GOOGLE_API_KEY_PRODUCTION --build-arg INSTANCE_VERSION=<< pipeline.parameters.instance-files-version >> -t noipm/police-data-manager-production:$CIRCLE_SHA1 .
      - run: docker build -f Dockerfile.worker --build-arg INSTANCE_VERSION=<< pipeline.parameters.instance-files-version >> -t noipm/police-data-manager-worker:$CIRCLE_SHA1 .
      - run: docker push noipm/police-data-manager-staging:$CIRCLE_SHA1
      - run: docker push noipm/police-data-manager-production:$CIRCLE_SHA1
      - run: docker push noipm/police-data-manager-worker:$CIRCLE_SHA1

  build-and-publish-playground:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker build -f Dockerfile.web --build-arg REACT_APP_ENV=playground --build-arg REACT_APP_GOOGLE_API_KEY=$REACT_APP_GOOGLE_API_KEY_PREPROD -t noipm/police-data-manager-playground:$CIRCLE_SHA1 .
      - run: docker build -f Dockerfile.worker -t noipm/police-data-manager-playground-worker:$CIRCLE_SHA1 .
      - run: docker push noipm/police-data-manager-playground:$CIRCLE_SHA1
      - run: docker push noipm/police-data-manager-playground-worker:$CIRCLE_SHA1

  deploy-playground:
    docker:
      - image: noipm/docker-heroku:7.0.65
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker pull noipm/police-data-manager-playground:$CIRCLE_SHA1
      - run: docker pull noipm/police-data-manager-playground-worker:$CIRCLE_SHA1
      - run:
          name: Migrate and Seed DB
          command: |
            docker run \
            -e NODE_ENV=playground \
            -e DATABASE_USERNAME=$PLAYGROUND_DATABASE_USERNAME \
            -e DATABASE_PASS=$PLAYGROUND_DATABASE_PASS \
            -e DATABASE_NAME=$PLAYGROUND_DATABASE_NAME \
            -e DATABASE_HOST=$PLAYGROUND_DATABASE_HOST \
            -e AWS_ACCESS_KEY_ID=$CI_AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$CI_AWS_SECRET_ACCESS_KEY \
            noipm/police-data-manager-playground:$CIRCLE_SHA1 yarn setup:db

      - run: docker login --username=$HEROKU_USER --password=$HEROKU_API_KEY registry.heroku.com
      - run: docker tag noipm/police-data-manager-playground:$CIRCLE_SHA1 registry.heroku.com/noipm-playground/web
      - run: docker push registry.heroku.com/noipm-playground/web
      - run: docker tag noipm/police-data-manager-playground-worker:$CIRCLE_SHA1 registry.heroku.com/noipm-playground/worker
      - run: docker push registry.heroku.com/noipm-playground/worker
      - run: heroku container:release web worker --app noipm-playground

  ensure-playground-deploy-succeeded:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: scripts/ensure-deploy-succeeded.sh https://noipm-playground.herokuapp.com/health-check

  letter-generation-testing-ci:
    docker:
      - image: postman/newman:latest
    steps:
      - checkout
      - run: mkdir /tmp/output
      - run:
          name: Run Letter Integration Tests
          command: |
            newman run \
            -e doc/postman/CI.postman_environment.json \
            --env-var client_id=$CI_AUTH0_CLIENT_ID \
            --env-var client_secret=$CI_AUTH0_CLIENT_SECRET \
            doc/postman/Police\ Data\ Management.postman_collection.json
# > /tmp/output/newman-result.txt
      # - run:
      #     name: Test Results
      #     command: cat /tmp/output/newman-result.txt
      # - persist_to_workspace:
      #     root: '/tmp'
      #     paths:
      #       - output/newman-result.txt
  
  letter-generation-ci-latency-check:
    docker:
      - image: node:latest
    steps:
      - run:
          name: Install Git
          command: apt-get update && apt-get install git --assume-yes
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Capture Test Output as CSV
          command: scripts/extractTestLatency.sh > output/letter-generation-test-stats.csv
      - run:
          name: Assert on Test Latency
          command: node scripts/assertOnTestLatency.js
      - store_artifacts:
          path: output/

  deploy-ci:
    docker:
      - image: noipm/docker-heroku:7.0.65
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker pull noipm/police-data-manager-ci:$CIRCLE_SHA1
      - run: docker pull noipm/police-data-manager-ci-worker:$CIRCLE_SHA1
      - run:
          name: Migrate and Seed DB
          command: |
            docker run \
            -e NODE_ENV=ci \
            -e DATABASE_USERNAME=$CI_DATABASE_USERNAME \
            -e DATABASE_PASS=$CI_DATABASE_PASS \
            -e DATABASE_NAME=$CI_DATABASE_NAME \
            -e DATABASE_HOST=$CI_DATABASE_HOST \
            -e AWS_ACCESS_KEY_ID=$CI_AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$CI_AWS_SECRET_ACCESS_KEY \
            noipm/police-data-manager-ci:$CIRCLE_SHA1 yarn setup:db

      - run: docker login --username=$HEROKU_USER --password=$HEROKU_API_KEY registry.heroku.com
      - run: docker tag noipm/police-data-manager-ci:$CIRCLE_SHA1 registry.heroku.com/noipm-ci/web
      - run: docker push registry.heroku.com/noipm-ci/web
      - run: docker tag noipm/police-data-manager-ci-worker:$CIRCLE_SHA1 registry.heroku.com/noipm-ci/worker
      - run: docker push registry.heroku.com/noipm-ci/worker
      - run: heroku container:release web worker --app noipm-ci

  ensure-ci-deploy-succeeded:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: scripts/ensure-deploy-succeeded.sh https://noipm-ci.herokuapp.com/health-check

  e2e-testing-ci-pdm:
    docker:
      - image: noipm/e2e:latest
    steps:
      # - run:
      #     name: Install Git
      #     command: apt-get update && apt-get install --assume-yes git
      - checkout
      - run:
          name: Run E2E tests
          command: |
            echo 'export TEST_USER=$CI_TEST_USER' >> $BASH_ENV
            echo 'export TEST_PASS=$CI_TEST_PASS' >> $BASH_ENV
            source $BASH_ENV
            nightwatch --config /src/instance-files/tests/e2e/nightwatch.conf.js --env ci e2e/tests/policeDataManager --retries 2
      - store_artifacts:
          path: e2e/tests/policeDataManager
  deploy-staging:
    docker:
      - image: noipm/docker-heroku:7.0.65
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker pull noipm/police-data-manager-staging:$CIRCLE_SHA1
      - run: docker pull noipm/police-data-manager-worker:$CIRCLE_SHA1
      - run: heroku maintenance:on --app noipm-staging
      - run:
          name: Migrate and Seed DB
          command: |
            docker run \
            -e NODE_ENV=staging \
            -e DATABASE_USERNAME=$STAGING_DATABASE_USERNAME \
            -e DATABASE_PASS=$STAGING_DATABASE_PASS \
            -e DATABASE_NAME=$STAGING_DATABASE_NAME \
            -e DATABASE_HOST=$STAGING_DATABASE_HOST \
            -e AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY \
            noipm/police-data-manager-staging:$CIRCLE_SHA1 yarn setup:db

      - run: docker login --username=$HEROKU_USER --password=$HEROKU_API_KEY registry.heroku.com
      - run: docker tag noipm/police-data-manager-staging:$CIRCLE_SHA1 registry.heroku.com/noipm-staging/web
      - run: docker tag noipm/police-data-manager-worker:$CIRCLE_SHA1 registry.heroku.com/noipm-staging/worker
      - run: docker push registry.heroku.com/noipm-staging/web
      - run: docker push registry.heroku.com/noipm-staging/worker
      - run: heroku container:release web worker --app noipm-staging
      - run: heroku maintenance:off --app noipm-staging

  ensure-staging-deploy-succeeded:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: scripts/ensure-deploy-succeeded.sh https://noipm-staging.herokuapp.com/health-check

  e2e-testing-staging:
    docker:
      - image: noipm/e2e:latest
    steps:
      - checkout
      - run:
          name: Run E2E tests
          command: |
            echo 'export TEST_USER=$STAGING_TEST_USER' >> $BASH_ENV
            echo 'export TEST_PASS=$STAGING_TEST_PASS' >> $BASH_ENV
            echo 'export AUTH0_CLIENT_SECRET=$STAGING_AUTH0_CLIENT_SECRET' >> $BASH_ENV
            source $BASH_ENV
            nightwatch --config /src/instance-files/tests/e2e/nightwatch.conf.js --env staging e2e/tests/policeDataManager --retries 2
      - store_artifacts:
          path: e2e/tests

  deploy-production:
    docker:
      - image: noipm/docker-heroku:7.0.65
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker pull noipm/police-data-manager-production:$CIRCLE_SHA1
      - run: docker pull noipm/police-data-manager-worker:$CIRCLE_SHA1
      - run: heroku maintenance:on --app noipm-production
      - run:
          name: Migrate production database
          command: |
            docker run \
            -e NODE_ENV=production \
            -e DATABASE_USERNAME=$PRODUCTION_DATABASE_USERNAME \
            -e DATABASE_PASS=$PRODUCTION_DATABASE_PASS \
            -e DATABASE_NAME=$PRODUCTION_DATABASE_NAME \
            -e DATABASE_HOST=$PRODUCTION_DATABASE_HOST \
            -e AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY \
            noipm/police-data-manager-production:$CIRCLE_SHA1 yarn setup:db
      - run: docker login --username=$HEROKU_USER --password=$HEROKU_API_KEY registry.heroku.com
      - run: docker tag noipm/police-data-manager-production:$CIRCLE_SHA1 registry.heroku.com/noipm-production/web
      - run: docker tag noipm/police-data-manager-worker:$CIRCLE_SHA1 registry.heroku.com/noipm-production/worker
      - run: docker push registry.heroku.com/noipm-production/web
      - run: docker push registry.heroku.com/noipm-production/worker
      - run: heroku container:release web worker --app noipm-production
      - run: heroku maintenance:off --app noipm-production

  ensure-production-deploy-succeeded:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: scripts/ensure-deploy-succeeded.sh https://noipm-production.herokuapp.com/health-check

  update-search-indices-ci:
    docker:
      - image: noipm/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
    steps:
      - run:
          name: Defines Environment Variables at Runtime
          command: |
            echo 'export NODE_ENV=ci' >> $BASH_ENV \
            echo 'export DATABASE_USERNAME=$CI_DATABASE_USERNAME' >> $BASH_ENV \
            echo 'export DATABASE_PASS=$CI_DATABASE_PASS' >> $BASH_ENV \
            echo 'export DATABASE_NAME=$CI_DATABASE_NAME' >> $BASH_ENV \
            echo 'export DATABASE_HOST=$CI_DATABASE_HOST' >> $BASH_ENV \
            source $BASH_ENV
      # - run:
      #     name: Install Git
      #     command: apt-get update && apt-get install --assume-yes git
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Update Search Indices
          command: npx babel-node scripts/search/create-search-index.js

  update-search-indices-staging:
    docker:
      - image: noipm/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
    steps:
      - run:
          name: Defines Environment Variables at Runtime
          command: |
            echo 'export NODE_ENV=staging' >> $BASH_ENV \
            echo 'export DATABASE_USERNAME=$STAGING_DATABASE_USERNAME' >> $BASH_ENV \
            echo 'export DATABASE_PASS=$STAGING_DATABASE_PASS' >> $BASH_ENV \
            echo 'export DATABASE_NAME=$STAGING_DATABASE_NAME' >> $BASH_ENV \
            echo 'export DATABASE_HOST=$STAGING_DATABASE_HOST' >> $BASH_ENV \
            source $BASH_ENV
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Update Search Indices
          command: npx babel-node scripts/search/create-search-index.js

  update-search-indices-production:
    docker:
      - image: noipm/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
    steps:
      - run:
          name: Defines Environment Variables at Runtime
          command: |
            echo 'export NODE_ENV=production' >> $BASH_ENV \
            echo 'export DATABASE_USERNAME=$PRODUCTION_DATABASE_USERNAME' >> $BASH_ENV \
            echo 'export DATABASE_PASS=$PRODUCTION_DATABASE_PASS' >> $BASH_ENV \
            echo 'export DATABASE_NAME=$PRODUCTION_DATABASE_NAME' >> $BASH_ENV \
            echo 'export DATABASE_HOST=$PRODUCTION_DATABASE_HOST' >> $BASH_ENV \
            source $BASH_ENV
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install --production=false
      - run:
          name: Update Search Indices
          command: npx babel-node scripts/search/create-search-index.js

workflows:
  version: 2
  nightly_index_update_ci:
    triggers:
      - schedule:
          cron: "0 5 * * *" # Resolves to 11 PM CST
          filters:
            branches:
              only:
                - master
    jobs:
      - get-instance-files-latest
      - update-search-indices-ci:
          requires:
            - get-instance-files-latest

  nightly_index_update_staging:
    triggers:
      - schedule:
          cron: "0 6 * * *" # Resolves to 12 AM CST
          filters:
            branches:
              only:
                - << pipeline.parameters.stage-branch >>
    jobs:
      - get-instance-files-latest
      - update-search-indices-staging:
          requires:
            - get-instance-files-latest

  nightly_index_update_production:
    triggers:
      - schedule:
          cron: "0 7 * * *" # Resolves to 1 AM CST
          filters:
            branches:
              only:
                - << pipeline.parameters.prod-branch >>
    jobs:
      - get-instance-files-latest
      - update-search-indices-production:
          requires:
            - get-instance-files-latest

  build_and_deploy_master:
    jobs:
      - security-check:
          filters:
            branches:
              only:
                - master
      - get-instance-files-latest:
          requires:
            - security-check
      - test-client:
          requires:
            - get-instance-files-latest
      - test-server-handlers-ci:
          requires:
            - get-instance-files-latest
      - test-server-worker-non-handlers:
          requires:
            - get-instance-files-latest
      - build-and-publish-master:
          requires:
            - test-client
            - test-server-handlers-ci
            - test-server-worker-non-handlers
      - deploy-ci:
          requires:
            - build-and-publish-master
      - ensure-ci-deploy-succeeded:
          requires:
            - deploy-ci
      - letter-generation-testing-ci:
          requires:
            - ensure-ci-deploy-succeeded
      # - letter-generation-ci-latency-check:
      #     requires:
      #       - letter-generation-testing-ci
      - e2e-testing-ci-pdm:
          requires:
            - letter-generation-testing-ci
  
  build_and_deploy_release:
    jobs:
      - security-check:
          filters:
            branches:
              only:
                - << pipeline.parameters.stage-branch >>
      - get-instance-files-release:
          requires:
            - security-check
      - test-client:
          requires:
            - get-instance-files-release
      - test-server-handlers-staging:
          requires:
            - get-instance-files-release
      - test-server-worker-non-handlers:
          requires:
            - get-instance-files-release
      - build-and-publish-release:
          requires:
            - test-client
            - test-server-handlers-staging
            - test-server-worker-non-handlers
      - deploy-staging:
          requires:
            - build-and-publish-release
      - ensure-staging-deploy-succeeded:
          requires:
            - deploy-staging
      - e2e-testing-staging:
          requires:
            - ensure-staging-deploy-succeeded
      - hold-for-production:
          type: approval
          requires:
            - e2e-testing-staging
      - deploy-production:
          requires:
            - hold-for-production
      - ensure-production-deploy-succeeded:
          requires:
            - deploy-production

  build_and_deploy_playground:
    jobs:
      - security-check:
          filters:
            branches:
              only:
                - instance-setup-workspace
      - get-instance-files-latest:
          requires:
            - security-check
      - test-client:
          requires:
            - get-instance-files-latest
      - test-server-worker-non-handlers:
          requires:
            - get-instance-files-latest
      - build-and-publish-playground:
          requires:
            - test-client
            - test-server-worker-non-handlers
      - deploy-playground:
          requires:
            - build-and-publish-playground
      - ensure-playground-deploy-succeeded:
          requires:
            - deploy-playground
