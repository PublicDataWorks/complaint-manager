version: 2
jobs:
    test:
        docker:
          - image: kkarczmarczyk/node-yarn
            environment:
              NODE_ENV: test
          - image: postgres:10.1-alpine
            environment:
              POSTGRES_PASSWORD: password
              POSTGRES_DB: complaint-manager-test
        steps:
          - checkout
          - run:
              name: Install Dependencies
              command: yarn install
          - run:
              name: Run client tests
              command: yarn test:client
          - run:
              name: Run server tests
              command: yarn test:server --forceExit
              environment:
                NEW_RELIC_ENABLED: false
                NEW_RELIC_NO_CONFIG_FILE: true


    security-check:
        docker:
          - image: docker:stable
        steps:
          - checkout
          - setup_remote_docker
          - run:
              name: Run Security Checks
              command: ./scripts/security-checks.sh

    build-and-publish-master:
        docker:
          - image: docker:stable
        steps:
          - checkout
          - setup_remote_docker
          - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          - run: docker build --build-arg REACT_ENV=ci -t noipm/complaint-manager-ci:$CIRCLE_SHA1 .
          - run: docker push noipm/complaint-manager-ci:$CIRCLE_SHA1

    build-and-publish-release:
        docker:
          - image: docker:stable
        steps:
          - checkout
          - setup_remote_docker
          - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          - run: docker build --build-arg REACT_ENV=staging -t noipm/complaint-manager-staging:$CIRCLE_SHA1 .
          - run: docker build --build-arg REACT_ENV=production -t noipm/complaint-manager-production:$CIRCLE_SHA1 .
          - run: docker push noipm/complaint-manager-staging:$CIRCLE_SHA1
          - run: docker push noipm/complaint-manager-production:$CIRCLE_SHA1

    deploy-ci:
            docker:
              - image: noipm/docker-heroku:7.0.65
            steps:
              - setup_remote_docker
              - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
              - run: docker pull noipm/complaint-manager-ci:$CIRCLE_SHA1
              - run:
                  name: Migrate and Seed DB
                  command: |
                    docker run \
                    -e NODE_ENV=ci \
                    -e DATABASE_USERNAME=$CI_DATABASE_USERNAME \
                    -e DATABASE_PASS=$CI_DATABASE_PASS \
                    -e DATABASE_NAME=$CI_DATABASE_NAME \
                    -e DATABASE_HOST=$CI_DATABASE_HOST \
                    -e AWS_ACCESS_KEY_ID=$CI_AWS_ACCESS_KEY_ID \
                    -e AWS_SECRET_ACCESS_KEY=$CI_AWS_SECRET_ACCESS_KEY \
                    noipm/complaint-manager-ci:$CIRCLE_SHA1 yarn setup:db

              - run: docker login --username=$HEROKU_USER --password=$HEROKU_API_KEY registry.heroku.com
              - run: docker tag noipm/complaint-manager-ci:$CIRCLE_SHA1 registry.heroku.com/noipm-ci/web
              - run: docker push registry.heroku.com/noipm-ci/web
              - run: heroku container:release web --app noipm-ci

    ensure-ci-deploy-succeeded:
          docker:
            - image: alpine:latest
          steps:
            - checkout
            - run: scripts/ensure-deploy-succeeded.sh https://noipm-ci.herokuapp.com/health-check

    e2e-testing-ci:
            docker:
              - image: noipm/nightwatch-chrome:latest
            steps:
              - checkout
              - run:
                  name: Run E2E tests
                  command: |
                    echo 'export HOST=$CI_HOST' >> $BASH_ENV
                    echo 'export TEST_USER=$CI_TEST_USER' >> $BASH_ENV
                    echo 'export TEST_PASS=$CI_TEST_PASS' >> $BASH_ENV
                    source $BASH_ENV
                    cd e2e nightwatch --env $ENVIRONMENT
              - store_artifacts:
                  path: e2e/tests/userJourney

    deploy-staging:
        docker:
          - image: noipm/docker-heroku:7.0.65
        steps:
          - setup_remote_docker
          - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          - run: docker pull noipm/complaint-manager-staging:$CIRCLE_SHA1
          - run: heroku maintenance:on --app noipm-staging
          - run:
              name: Migrate and Seed DB
              command: |
                docker run \
                -e NODE_ENV=staging \
                -e DATABASE_USERNAME=$STAGING_DATABASE_USERNAME \
                -e DATABASE_PASS=$STAGING_DATABASE_PASS \
                -e DATABASE_NAME=$STAGING_DATABASE_NAME \
                -e DATABASE_HOST=$STAGING_DATABASE_HOST \
                -e AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID \
                -e AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY \
                noipm/complaint-manager-staging:$CIRCLE_SHA1 yarn setup:db

          - run: docker login --username=$HEROKU_USER --password=$HEROKU_API_KEY registry.heroku.com
          - run: docker tag noipm/complaint-manager-staging:$CIRCLE_SHA1 registry.heroku.com/noipm-staging/web
          - run: docker push registry.heroku.com/noipm-staging/web
          - run: heroku container:release web --app noipm-staging
          - run: heroku maintenance:off --app noipm-staging

    ensure-staging-deploy-succeeded:
      docker:
        - image: alpine:latest
      steps:
        - checkout
        - run: scripts/ensure-deploy-succeeded.sh https://noipm-staging.herokuapp.com/health-check

    e2e-testing-staging:
            docker:
              - image: noipm/nightwatch-chrome:latest
            steps:
              - checkout
              - run:
                  name: Run E2E tests
                  command: |
                    echo 'export HOST=$STAGING_HOST' >> $BASH_ENV
                    echo 'export TEST_USER=$STAGING_TEST_USER' >> $BASH_ENV
                    echo 'export TEST_PASS=$STAGING_TEST_PASS' >> $BASH_ENV
                    source $BASH_ENV
                    cd e2e nightwatch --env $ENVIRONMENT
              - store_artifacts:
                  path: e2e/tests/userJourney

    deploy-production:
        docker:
          - image: noipm/docker-heroku:7.0.65
        steps:
          - setup_remote_docker
          - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          - run: docker pull noipm/complaint-manager-production:$CIRCLE_SHA1
          - run: heroku maintenance:on --app noipm-production
          - run:
              name: Migrate production database
              command: |
                docker run \
                -e NODE_ENV=production \
                -e DATABASE_USERNAME=$PRODUCTION_DATABASE_USERNAME \
                -e DATABASE_PASS=$PRODUCTION_DATABASE_PASS \
                -e DATABASE_NAME=$PRODUCTION_DATABASE_NAME \
                -e DATABASE_HOST=$PRODUCTION_DATABASE_HOST \
                -e AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID \
                -e AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY \
                noipm/complaint-manager-production:$CIRCLE_SHA1 yarn setup:db
          - run: docker login --username=$HEROKU_USER --password=$HEROKU_API_KEY registry.heroku.com
          - run: docker tag noipm/complaint-manager-production:$CIRCLE_SHA1 registry.heroku.com/noipm-production/web
          - run: docker push registry.heroku.com/noipm-production/web
          - run: heroku container:release web --app noipm-production
          - run: heroku maintenance:off --app noipm-production

    ensure-production-deploy-succeeded:
      docker:
        - image: alpine:latest
      steps:
        - checkout
        - run: scripts/ensure-deploy-succeeded.sh https://noipm-production.herokuapp.com/health-check

workflows:
  version: 2
  build_and_deploy_master:
    jobs:
      - test:
          filters:
            branches:
              only:
                - master
      - security-check:
          requires:
            - test
      - build-and-publish-master:
          requires:
            - security-check
      - deploy-ci:
          requires:
            - build-and-publish-master
      - ensure-ci-deploy-succeeded:
          requires:
            - deploy-ci
      - e2e-testing-ci:
          requires:
            - ensure-ci-deploy-succeeded
  build_and_deploy_release:
      jobs:
        - test:
            filters:
              branches:
                only:
                  - release
        - security-check:
            requires:
              - test
        - build-and-publish-release:
            requires:
              - security-check
        - deploy-staging:
            requires:
              - build-and-publish-release
        - ensure-staging-deploy-succeeded:
            requires:
              - deploy-staging
        - e2e-testing-staging:
            requires:
              - ensure-staging-deploy-succeeded
        - hold-for-production:
            type: approval
            requires:
              - e2e-testing-staging
        - deploy-production:
            requires:
              - hold-for-production
        - ensure-production-deploy-succeeded:
            requires:
              - deploy-production