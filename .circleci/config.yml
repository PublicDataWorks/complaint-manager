version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.2.4
parameters:
  prod-indexing-branch:
    type: string
    default: "release_v3.56.0"
  stage-indexing-branch:
    type: string
    default: "release_v3.56.0"
  instance-files-image-name-noipm:
    type: string
    default: "publicdataworks/instance-files-noipm"
  instance-files-image-name-hawaii:
    type: string
    default: "publicdataworks/instance-files-hawaii-csoc"
  ubuntu-version:
    type: string
    default: "1.1.0"
  docker-heroku-version:
    type: string
    default: "1.0.0"

commands:
  build-base-image:
    parameters:
      env:
        default: "ci"
        type: string
      version:
        default: $CIRCLE_SHA1
        type: string
      instance-version:
        default: "latest"
        type: string
      google-api-key:
        default: $REACT_APP_GOOGLE_API_KEY_PREPROD
        type: string
      instance-image:
        default: << pipeline.parameters.instance-files-image-name-noipm >>
        type: string
      image-name:
        default: base-app
        type: string
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: |
          docker build -f Dockerfile.base --build-arg REACT_APP_ENV=<<parameters.env>> \
          --build-arg REACT_APP_GOOGLE_API_KEY=<<parameters.google-api-key>> \
          --build-arg REACT_APP_GITHUB_TOKEN=$REACT_APP_GITHUB_TOKEN \
          --build-arg INSTANCE_VERSION=<<parameters.instance-version>> \
          --build-arg INSTANCE_IMAGE=<<parameters.instance-image>> \
          --build-arg REACT_APP_INSTANCE_FILES_DIR=/app/src/instance-files \
          -t publicdataworks/<<parameters.image-name>>:latest .
  build-and-publish-app-image:
    parameters:
      env:
        default: "ci"
        type: string
      version:
        default: $CIRCLE_SHA1
        type: string
      base-image:
        default: "base-app"
        type: string
    steps:
      - run: docker build -f Dockerfile.web --build-arg BASE_IMAGE_NAME=<<parameters.base-image>> --build-arg REACT_APP_INSTANCE_FILES_DIR=/app/src/instance-files -t publicdataworks/police-data-manager-<<parameters.env>>:<<parameters.version>> .
      - run: docker push publicdataworks/police-data-manager-<<parameters.env>>:<<parameters.version>>
  build-and-publish-worker-image:
    parameters:
      env-suffix:
        default: "-ci"
        type: string
      version:
        default: $CIRCLE_SHA1
        type: string
      base-image:
        default: "base-app"
        type: string
    steps:
      - run: docker build -f Dockerfile.worker --build-arg BASE_IMAGE_NAME=<<parameters.base-image>> --build-arg REACT_APP_INSTANCE_FILES_DIR=/app/src/instance-files -t publicdataworks/police-data-manager<<parameters.env-suffix>>-worker:<<parameters.version>> .
      - run: docker push publicdataworks/police-data-manager<<parameters.env-suffix>>-worker:<<parameters.version>>
  get-instance-files-latest:
    parameters:
      instance-files-image-suffix:
        type: string
        default: noipm
    steps:
      - setup_remote_docker
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run:
          name: Copies instance files from temp container
          command: docker cp $(docker create --name temp-container publicdataworks/instance-files-<< parameters.instance-files-image-suffix >>:latest):/instance-files instance-files-<< parameters.instance-files-image-suffix >>/
      - run:
          name: Removes temporary container
          command: docker rm temp-container
      - persist_to_workspace:
          root: .
          paths: instance-files-<< parameters.instance-files-image-suffix >>/*
  get-tagged-instance-files:
    parameters:
      instance-files-image-name:
        type: string
        default: << pipeline.parameters.instance-files-image-name-noipm >>
    steps:
      - setup_remote_docker
      - checkout
      - run: apk add jq
      - run: jq .version package.json | tr -d '"' > release.version
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker pull << parameters.instance-files-image-name >>:$(cat release.version)
      - run:
          name: Copies instance files from temp container
          command: docker cp $(docker create --name temp-container << parameters.instance-files-image-name >>:$(cat release.version)):/instance-files instance-files/
      - run:
          name: Removes temporary container
          command: docker rm temp-container
      - persist_to_workspace:
          root: .
          paths:
            - instance-files/*
            - release.version
  deploy-to-lower-env:
    parameters:
      environment:
        default: "ci"
        type: string
      org:
        default: "NOIPM"
        type: string
      env-uppercase:
        default: "CI"
        type: string
      image:
        default: "police-data-manager-ci"
        type: string
      worker-image:
        default: "police-data-manager-ci-worker"
        type: string
      version:
        default: $CIRCLE_SHA1
        type: string
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker pull publicdataworks/<<parameters.image>>:<<parameters.version>>
      - run: docker pull publicdataworks/<<parameters.worker-image>>:<<parameters.version>>
      - run:
          name: Migrate and Seed DB
          command: |
            docker run \
            -e NODE_ENV=<<parameters.environment>> \
            -e DATABASE_USERNAME=$<<parameters.env-uppercase>>_DATABASE_USERNAME \
            -e DATABASE_PASS=$<<parameters.env-uppercase>>_DATABASE_PASS \
            -e DATABASE_NAME=$<<parameters.env-uppercase>>_DATABASE_NAME \
            -e DATABASE_HOST=$<<parameters.env-uppercase>>_DATABASE_HOST \
            -e AWS_ACCESS_KEY_ID=$<<parameters.env-uppercase>>_AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$<<parameters.env-uppercase>>_AWS_SECRET_ACCESS_KEY \
            -e REACT_APP_INSTANCE_FILES_DIR=/app/src/instance-files \
            -e ORG=<<parameters.org>> \
            publicdataworks/<<parameters.image>>:<<parameters.version>> yarn reseed:db
      - run: docker login --username=$HEROKU_USER --password=$HEROKU_API_KEY registry.heroku.com
      - run: docker tag publicdataworks/<<parameters.image>>:<<parameters.version>> registry.heroku.com/noipm-<<parameters.environment>>/web
      - run: docker tag publicdataworks/<<parameters.worker-image>>:<<parameters.version>> registry.heroku.com/noipm-<<parameters.environment>>/worker
      - run: docker push registry.heroku.com/noipm-<<parameters.environment>>/web
      - run: docker push registry.heroku.com/noipm-<<parameters.environment>>/worker
      - run: heroku container:release web worker --app noipm-<<parameters.environment>>
  yarn-test:
    parameters:
      test-command:
        default: yarn test:client
        type: string
      instance-files:
        default: /root/project/src/instance-files-noipm
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Run Jest tests
          command: << parameters.test-command >>
          environment:
            REACT_APP_INSTANCE_FILES_DIR: << parameters.instance-files >>
  e2e-test:
    parameters:
      instance-files:
        default: "instance-files-noipm"
        type: string
      env:
        default: "ci"
        type: string
      env-uppercase:
        default: "CI"
        type: string
    steps:
      # - run:
      #     name: Install Git
      #     command: apt-get update && apt-get install --assume-yes git
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Run E2E tests
          command: |
            echo 'export TEST_USER=$<<parameters.env-uppercase>>_TEST_USER' >> $BASH_ENV
            echo 'export TEST_PASS=$<<parameters.env-uppercase>>_TEST_PASS' >> $BASH_ENV
            echo 'export REACT_APP_INSTANCE_FILES_DIR=/root/project/src/<<parameters.instance-files>>' >> $BASH_ENV
            echo 'export REACT_APP_USE_CLOUD_SERVICES=false' >> $BASH_ENV
            source $BASH_ENV
            nightwatch --config /src/instance-files/tests/e2e/nightwatch.conf.js --env <<parameters.env>> e2e/tests/policeDataManager --retries 2
      - store_artifacts:
          path: e2e/tests/policeDataManager
  tag-instance-files:
    parameters:
      instance-files:
        default: "instance-files-noipm"
        type: string
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - attach_workspace:
          at: src/
      - run: echo "FROM alpine:latest" >> src/Dockerfile
      - run: echo "COPY ./<<parameters.instance-files>> instance-files" >> src/Dockerfile
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker build -t publicdataworks/<<parameters.instance-files>>:$(cat src/version.txt) src/
      - run: docker push publicdataworks/<<parameters.instance-files>>:$(cat src/version.txt)

jobs:
  get-instance-files-latest-noipm:
    docker:
      - image: docker:stable
    steps:
      - get-instance-files-latest:
          instance-files-image-suffix: "noipm"

  get-instance-files-latest-hawaii:
    docker:
      - image: docker:stable
    steps:
      - get-instance-files-latest:
          instance-files-image-suffix: "hawaii-csoc"

  get-instance-files-release-noipm:
    docker:
      - image: docker:stable
    steps:
      - get-tagged-instance-files:
          instance-files-image-name: << pipeline.parameters.instance-files-image-name-noipm >>

  get-instance-files-release-hawaii:
    docker:
      - image: docker:stable
    steps:
      - get-tagged-instance-files:
          instance-files-image-name: << pipeline.parameters.instance-files-image-name-hawaii >>

  test-client-noipm:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
    steps:
      - yarn-test:
          test-command: "yarn test:client:ci"
          instance-files: "/root/project/src/instance-files-noipm"

  test-client-hawaii:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
    steps:
      - yarn-test:
          test-command: "yarn test:client:ci"
          instance-files: "/root/project/src/instance-files-hawaii-csoc"

  test-server-and-worker-ci-noipm:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
      - image: postgres:10.9-alpine
    steps:
      - yarn-test:
          test-command: AWS_ACCESS_KEY_ID=$CI_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$CI_AWS_SECRET_ACCESS_KEY yarn test:server:worker:ci
          instance-files: "/root/project/src/instance-files-noipm"
      - store_artifacts:
          name: Upload PNG diffs in case the PDF compare job(s) failed
          path: /root/project/src/testPDFs/diffPNGs/noipm
          destination: .
          when: on_fail

  test-server-and-worker-ci-hawaii:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
      - image: postgres:10.9-alpine
    steps:
      - yarn-test:
          test-command: AWS_ACCESS_KEY_ID=$CI_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$CI_AWS_SECRET_ACCESS_KEY yarn test:server:worker:ci
          instance-files: "/root/project/src/instance-files-hawaii-csoc"
      - store_artifacts:
          name: Upload PNG diffs in case the PDF compare job(s) failed
          path: /root/project/src/testPDFs/diffPNGs/hawaii
          destination: .
          when: on_fail

  test-server-handlers-ci:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
          REACT_APP_INSTANCE_FILES_DIR: /root/project/src/instance-files
      - image: postgres:10.9-alpine
    steps:
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Run server handler unit tests
          command: AWS_ACCESS_KEY_ID=$CI_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$CI_AWS_SECRET_ACCESS_KEY yarn test:server-handlers:ci
      - store_artifacts:
          name: Upload PNG diffs in case the PDF compare job(s) failed
          path: /root/project/src/testPDFs/diffPNGs
          destination: .
          when: on_fail
  test-server-handlers-staging:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
          REACT_APP_INSTANCE_FILES_DIR: /root/project/src/instance-files
      - image: postgres:10.9-alpine
    steps:
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Run server handler unit tests
          command: AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY yarn test:server-handlers:ci
      - store_artifacts:
          name: Upload PNG diffs in case the PDF compare job(s) failed
          path: /root/project/src/testPDFs/diffPNGs
          destination: .
          when: on_fail
  test-server-worker-non-handlers:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
          REACT_APP_INSTANCE_FILES_DIR: /root/project/src/instance-files
      - image: postgres:10.9-alpine
    steps:
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Run server and worker unit tests, excluding handlers
          command: yarn test:server-worker-non-handlers:ci

  lighthouse:
    docker:
      # make sure you use an image that has browsers installed
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
    steps:
      - browser-tools/install-chrome
      - checkout
      - attach_workspace:
          at: src/
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          command: npm install -g @lhci/cli@0.3.x
      - run:
          command: ls
      - run:
          command: ls src/
      - run:
          name: lhci autorun
          command: |
            lhci autorun
      - run:
          name: purge audits from demo db
          command: |
            NODE_ENV=demo \
            DATABASE_USERNAME=$DEMO_DATABASE_USERNAME \
            DATABASE_PASS=$DEMO_DATABASE_PASS \
            DATABASE_NAME=$DEMO_DATABASE_NAME \
            DATABASE_HOST=$DEMO_DATABASE_HOST \
            REACT_APP_INSTANCE_FILES_DIR=/root/project/src/instance-files \
            npx babel-node ./scripts/purge-audits.js

  security-check:
    docker:
      - image: hawkeyesec/scanner-cli:latest
    steps:
      - checkout
      - run: /bin/sh ./scripts/security-checks.sh
      - store_artifacts:
          path: hawkeye_report.json

  build-and-publish-master-noipm:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - build-base-image:
          env: "ci"
          instance-image: << pipeline.parameters.instance-files-image-name-noipm >>
          image-name: "base-app"
      - build-and-publish-app-image:
          env: "ci"
          base-image: "base-app"
      - build-and-publish-worker-image:
          env-suffix: "-ci"
          base-image: "base-app"

  build-and-publish-master-hawaii:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - build-base-image:
          env: "ci"
          instance-image: << pipeline.parameters.instance-files-image-name-hawaii >>
          image-name: "base-app-hawaii"
      - build-and-publish-app-image:
          env: "hawaii-ci"
          base-image: "base-app-hawaii"
      - build-and-publish-worker-image:
          env-suffix: "-hawaii-ci"
          base-image: "base-app-hawaii"

  build-and-publish-playground:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - build-base-image:
          env: playground
      - build-and-publish-app-image:
          env: playground
      - build-and-publish-worker-image:
          env-suffix: -playground

  deploy-playground:
    docker:
      - image: publicdataworks/docker-heroku:<< pipeline.parameters.docker-heroku-version >>
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker pull publicdataworks/police-data-manager-playground:$CIRCLE_SHA1
      - run: docker pull publicdataworks/police-data-manager-playground-worker:$CIRCLE_SHA1
      - run:
          name: Migrate and Seed DB
          command: |
            docker run \
            -e NODE_ENV=playground \
            -e DATABASE_USERNAME=$PLAYGROUND_DATABASE_USERNAME \
            -e DATABASE_PASS=$PLAYGROUND_DATABASE_PASS \
            -e DATABASE_NAME=$PLAYGROUND_DATABASE_NAME \
            -e DATABASE_HOST=$PLAYGROUND_DATABASE_HOST \
            -e AWS_ACCESS_KEY_ID=$CI_AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$CI_AWS_SECRET_ACCESS_KEY \
            -e REACT_APP_INSTANCE_FILES_DIR=/app/src/instance-files \
            publicdataworks/police-data-manager-playground:$CIRCLE_SHA1 yarn setup:db

      - run: docker login --username=$HEROKU_USER --password=$HEROKU_API_KEY registry.heroku.com
      - run: docker tag publicdataworks/police-data-manager-playground:$CIRCLE_SHA1 registry.heroku.com/noipm-playground/web
      - run: docker push registry.heroku.com/noipm-playground/web
      - run: docker tag publicdataworks/police-data-manager-playground-worker:$CIRCLE_SHA1 registry.heroku.com/noipm-playground/worker
      - run: docker push registry.heroku.com/noipm-playground/worker
      - run: heroku container:release web worker --app noipm-playground

  ensure-playground-deploy-succeeded:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: scripts/ensure-deploy-succeeded.sh https://noipm-playground.herokuapp.com/health-check

  letter-generation-testing-ci:
    docker:
      - image: postman/newman:latest
    steps:
      - checkout
      - run: mkdir /tmp/output
      - run:
          name: Run Letter Integration Tests
          command: |
            newman run \
            -e doc/postman/CI.postman_environment.json \
            --env-var client_id=$CI_AUTH0_CLIENT_ID \
            --env-var client_secret=$CI_AUTH0_CLIENT_SECRET \
            doc/postman/Police\ Data\ Management.postman_collection.json
      # - run:
      #     name: Test Results
      #     command: cat /tmp/output/newman-result.txt
      # - persist_to_workspace:
      #     root: '/tmp'
      #     paths:
      #       - output/newman-result.txt

  # > /tmp/output/newman-result.txt
  letter-generation-ci-latency-check:
    docker:
      - image: node:latest
    steps:
      - run:
          name: Install Git
          command: apt-get update && apt-get install git --assume-yes
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Capture Test Output as CSV
          command: scripts/extractTestLatency.sh > output/letter-generation-test-stats.csv
      - run:
          name: Assert on Test Latency
          command: node scripts/assertOnTestLatency.js
      - store_artifacts:
          path: output/

  deploy-ci-noipm:
    docker:
      - image: publicdataworks/docker-heroku:<< pipeline.parameters.docker-heroku-version >>
    steps:
      - deploy-to-lower-env:
          environment: "ci"
          org: "NOIPM"
          env-uppercase: "CI"
          image: "police-data-manager-ci"
          worker-image: "police-data-manager-ci-worker"

  deploy-ci-hawaii:
    docker:
      - image: publicdataworks/docker-heroku:<< pipeline.parameters.docker-heroku-version >>
    steps:
      - deploy-to-lower-env:
          environment: "ci"
          org: "HAWAII"
          env-uppercase: "CI"
          image: "police-data-manager-hawaii-ci"
          worker-image: "police-data-manager-hawaii-ci-worker"

  ensure-ci-deploy-succeeded:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: sleep 60;
      - run: scripts/ensure-deploy-succeeded.sh https://noipm-ci.herokuapp.com/health-check

  e2e-testing-ci-pdm-noipm:
    docker:
      - image: publicdataworks/e2e-noipm:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - e2e-test:
          instance-files: "instance-files-noipm"
          env: "ci"
          env-uppercase: "CI"

  e2e-testing-ci-pdm-hawaii:
    docker:
      - image: publicdataworks/e2e-noipm:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - e2e-test:
          instance-files: "instance-files-hawaii-csoc"
          env: "ci"
          env-uppercase: "CI"

  deploy-staging-noipm:
    docker:
      - image: publicdataworks/docker-heroku:<< pipeline.parameters.docker-heroku-version >>
    steps:
      - attach_workspace:
          at: .
      - deploy-to-lower-env:
          environment: "staging"
          org: "NOIPM"
          env-uppercase: "STAGING"
          image: "police-data-manager-staging"
          worker-image: "police-data-manager-worker"
          version: "$(cat release.version)"

  deploy-staging-hawaii:
    docker:
      - image: publicdataworks/docker-heroku:<< pipeline.parameters.docker-heroku-version >>
    steps:
      - attach_workspace:
          at: .
      - deploy-to-lower-env:
          environment: "staging"
          org: "HAWAII"
          env-uppercase: "STAGING"
          image: "police-data-manager-hawaii-staging"
          worker-image: "police-data-manager-hawaii-worker"
          version: "$(cat release.version)"

  e2e-testing-playground:
    docker:
      - image: publicdataworks/e2e-noipm:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      # - run:
      #     name: Install Git
      #     command: apt-get update && apt-get install --assume-yes git
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Run E2E tests
          command: |
            echo 'export TEST_USER=$CI_TEST_USER' >> $BASH_ENV
            echo 'export TEST_PASS=$CI_TEST_PASS' >> $BASH_ENV
            echo 'export REACT_APP_INSTANCE_FILES_DIR=/root/project/src/instance-files' >> $BASH_ENV
            source $BASH_ENV
            nightwatch --config /src/instance-files/tests/e2e/nightwatch.conf.js --env ci e2e/tests/policeDataManager --retries 2
      - store_artifacts:
          path: e2e/tests/policeDataManager

  ensure-staging-deploy-succeeded:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: sleep 60;
      - run: scripts/ensure-deploy-succeeded.sh https://noipm-staging.herokuapp.com/health-check

  e2e-testing-staging:
    docker:
      - image: publicdataworks/e2e-noipm:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - e2e-test:
          instance-files: "instance-files"
          env: "staging"
          env-uppercase: "STAGING"

  deploy-production-noipm:
    docker:
      - image: publicdataworks/docker-heroku:<< pipeline.parameters.docker-heroku-version >>
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - attach_workspace:
          at: .
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: docker pull publicdataworks/police-data-manager-production:$(cat release.version)
      - run: docker pull publicdataworks/police-data-manager-worker:$(cat release.version)
      - run: heroku maintenance:on --app noipm-production
      - run:
          name: Migrate production database
          command: |
            docker run \
            -e NODE_ENV=production \
            -e DATABASE_USERNAME=$PRODUCTION_DATABASE_USERNAME \
            -e DATABASE_PASS=$PRODUCTION_DATABASE_PASS \
            -e DATABASE_NAME=$PRODUCTION_DATABASE_NAME \
            -e DATABASE_HOST=$PRODUCTION_DATABASE_HOST \
            -e AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY \
            -e REACT_APP_INSTANCE_FILES_DIR=/app/src/instance-files \
            -e ORG=NOIPM \
            publicdataworks/police-data-manager-production:$(cat release.version) yarn setup:db
      - run: docker login --username=$HEROKU_USER --password=$HEROKU_API_KEY registry.heroku.com
      - run: docker tag publicdataworks/police-data-manager-production:$(cat release.version) registry.heroku.com/noipm-production/web
      - run: docker tag publicdataworks/police-data-manager-worker:$(cat release.version) registry.heroku.com/noipm-production/worker
      - run: docker push registry.heroku.com/noipm-production/web
      - run: docker push registry.heroku.com/noipm-production/worker
      - run: heroku container:release web worker --app noipm-production
      - run: heroku maintenance:off --app noipm-production

  ensure-production-deploy-succeeded-noipm:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: scripts/ensure-deploy-succeeded.sh https://noipm-production.herokuapp.com/health-check

  tag-instance-files-noipm:
    docker:
      - image: publicdataworks/docker-heroku:<< pipeline.parameters.docker-heroku-version >>
    steps:
      - tag-instance-files:
          instance-files: "instance-files-noipm"

  tag-instance-files-hawaii:
    docker:
      - image: publicdataworks/docker-heroku:<< pipeline.parameters.docker-heroku-version >>
    steps:
      - tag-instance-files:
          instance-files: "instance-files-hawaii-csoc"

  bump-version:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
    steps:
      - run:
          name: Install Git
          command: apt-get update && apt-get install --assume-yes git
      - run: git config --global user.email "noipm.infrastructure@gmail.com"
      - run: git config --global user.name "Complaint Manager Pipeline"
      - checkout
      - run: yarn install
      - run: yarn release
      - run: apt-get install --assume-yes jq
      - run: jq .version package.json | tr -d '"' >> version.txt
      - persist_to_workspace:
          root: .
          paths:
            - .git/*
            - version.txt

  build-and-publish-app-staging-noipm:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - build-base-image:
          env: staging
          version: $(cat version.txt)
          instance-version: $(cat version.txt)
          google-api-key: $REACT_APP_GOOGLE_API_KEY_PREPROD
          instance-image: << pipeline.parameters.instance-files-image-name-noipm >>
          image-name: base-app
      - build-and-publish-app-image:
          env: staging
          version: $(cat version.txt)
          base-image: base-app

  build-and-publish-app-staging-hawaii:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - build-base-image:
          env: staging
          version: $(cat version.txt)
          instance-version: $(cat version.txt)
          google-api-key: $REACT_APP_GOOGLE_API_KEY_PREPROD
          instance-image: << pipeline.parameters.instance-files-image-name-hawaii >>
          image-name: base-app-hawaii
      - build-and-publish-app-image:
          env: hawaii-staging
          version: $(cat version.txt)
          base-image: base-app-hawaii

  build-and-publish-production-noipm:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - build-base-image:
          env: production
          version: $(cat version.txt)
          instance-version: $(cat version.txt)
          google-api-key: $REACT_APP_GOOGLE_API_KEY_PRODUCTION
          instance-image: << pipeline.parameters.instance-files-image-name-noipm >>
          image-name: base-app
      - build-and-publish-app-image:
          env: production
          version: $(cat version.txt)
          base-image: base-app
      - build-and-publish-worker-image:
          env-suffix: ""
          version: $(cat version.txt)
          base-image: base-app

  build-and-publish-production-hawaii:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - build-base-image:
          env: production
          version: $(cat version.txt)
          instance-version: $(cat version.txt)
          google-api-key: $REACT_APP_GOOGLE_API_KEY_PRODUCTION
          instance-image: << pipeline.parameters.instance-files-image-name-hawaii >>
          image-name: base-app-hawaii
      - build-and-publish-app-image:
          env: hawaii-production
          version: $(cat version.txt)
          base-image: base-app-hawaii
      - build-and-publish-worker-image:
          env-suffix: "-hawaii"
          version: $(cat version.txt)
          base-image: base-app-hawaii

  push-tag:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
    steps:
      - run:
          name: Install Git
          command: apt-get update && apt-get install --assume-yes git
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - $GITHUB_READ_WRITE_FINGERPRINT
      - run: git config --global user.email "noipm.infrastructure@gmail.com"
      - run: git config --global user.name "Complaint Manager Pipeline"
      - run: git checkout -b release_v$(cat version.txt)
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run: git push origin release_v$(cat version.txt) --follow-tags --no-verify
      - run: git checkout master
      - run: git reset --hard
      - run: git pull -r origin master
      - run: git push origin master --follow-tags --no-verify

  test-pact-noipm:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
          REACT_APP_USE_CLOUD_SERVICES: false
      - image: postgres:10.9-alpine
    steps:
      - yarn-test:
          test-command: yarn test:pact:client:ci
          instance-files: /root/project/src/instance-files-noipm
      - run:
          name: Verify Pact contract against server
          command: AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY yarn test:pact:server:ci
          environment:
            REACT_APP_INSTANCE_FILES_DIR: /root/project/src/instance-files-noipm
      - store_artifacts:
          name: Upload pact logs
          path: /root/project/pact/logs
          destination: .
          when: on_fail

  test-pact-hawaii:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
        environment:
          NODE_ENV: test
          REACT_APP_USE_CLOUD_SERVICES: false
      - image: postgres:10.9-alpine
    steps:
      - yarn-test:
          test-command: yarn test:pact:client:ci
          instance-files: /root/project/src/instance-files-hawaii-csoc
      - run:
          name: Verify Pact contract against server
          command: AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY yarn test:pact:server:ci
          environment:
            REACT_APP_INSTANCE_FILES_DIR: /root/project/src/instance-files-hawaii-csoc
      - store_artifacts:
          name: Upload pact logs
          path: /root/project/pact/logs
          destination: .
          when: on_fail

  update-search-indices-ci:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
    steps:
      - run:
          name: Defines Environment Variables at Runtime
          command: |
            echo 'export NODE_ENV=ci' >> $BASH_ENV \
            echo 'export DATABASE_USERNAME=$CI_DATABASE_USERNAME' >> $BASH_ENV \
            echo 'export DATABASE_PASS=$CI_DATABASE_PASS' >> $BASH_ENV \
            echo 'export DATABASE_NAME=$CI_DATABASE_NAME' >> $BASH_ENV \
            echo 'export DATABASE_HOST=$CI_DATABASE_HOST' >> $BASH_ENV \
            echo 'export ELASTIC_PASSWORD=$NON_PRODUCTION_ELASTIC_PASSWORD' >> $BASH_ENV \
            echo 'export REACT_APP_INSTANCE_FILES_DIR=/root/project/src/instance-files-noipm' >> $BASH_ENV \
            source $BASH_ENV
      # - run:
      #     name: Install Git
      #     command: apt-get update && apt-get install --assume-yes git
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Update Search Indices
          command: npx babel-node scripts/search/create-search-index.js

  update-search-indices-staging:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
    steps:
      - run:
          name: Defines Environment Variables at Runtime
          command: |
            echo 'export NODE_ENV=staging' >> $BASH_ENV \
            echo 'export DATABASE_USERNAME=$STAGING_DATABASE_USERNAME' >> $BASH_ENV \
            echo 'export DATABASE_PASS=$STAGING_DATABASE_PASS' >> $BASH_ENV \
            echo 'export DATABASE_NAME=$STAGING_DATABASE_NAME' >> $BASH_ENV \
            echo 'export DATABASE_HOST=$STAGING_DATABASE_HOST' >> $BASH_ENV \
            echo 'export ELASTIC_PASSWORD=$NON_PRODUCTION_ELASTIC_PASSWORD' >> $BASH_ENV \
            echo 'export REACT_APP_INSTANCE_FILES_DIR=/root/project/src/instance-files-noipm' >> $BASH_ENV \
            source $BASH_ENV
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install
      - run:
          name: Update Search Indices
          command: npx babel-node scripts/search/create-search-index.js

  update-search-indices-production:
    docker:
      - image: publicdataworks/docker-node-ubuntu:<< pipeline.parameters.ubuntu-version >>
    steps:
      - run:
          name: Defines Environment Variables at Runtime
          command: |
            echo 'export NODE_ENV=production' >> $BASH_ENV \
            echo 'export DATABASE_USERNAME=$PRODUCTION_DATABASE_USERNAME' >> $BASH_ENV \
            echo 'export DATABASE_PASS=$PRODUCTION_DATABASE_PASS' >> $BASH_ENV \
            echo 'export DATABASE_NAME=$PRODUCTION_DATABASE_NAME' >> $BASH_ENV \
            echo 'export DATABASE_HOST=$PRODUCTION_DATABASE_HOST' >> $BASH_ENV \
            echo 'export ELASTIC_PASSWORD=$PRODUCTION_ELASTIC_PASSWORD' >> $BASH_ENV \ 
            echo 'export REACT_APP_INSTANCE_FILES_DIR=/root/project/src/instance-files-noipm' >> $BASH_ENV \
            source $BASH_ENV
      - checkout
      - attach_workspace:
          at: src/
      - run:
          name: Install Dependencies
          command: yarn install --production=false
      - run:
          name: Update Search Indices
          command: npx babel-node scripts/search/create-search-index.js

workflows:
  version: 2
  build_and_deploy_master:
    jobs:
      - security-check:
          filters:
            branches:
              only:
                - master
      - get-instance-files-latest-noipm:
          requires:
            - security-check
      - get-instance-files-latest-hawaii:
          requires:
            - security-check
      - test-client-noipm:
          requires:
            - get-instance-files-latest-noipm
      - test-server-and-worker-ci-noipm:
          requires:
            - get-instance-files-latest-noipm
      - test-pact-noipm:
          requires:
            - get-instance-files-latest-noipm
      - build-and-publish-master-noipm:
          requires:
            - get-instance-files-latest-noipm
      - test-client-hawaii:
          requires:
            - get-instance-files-latest-hawaii
      - test-server-and-worker-ci-hawaii:
          requires:
            - get-instance-files-latest-hawaii
      - test-pact-hawaii:
          requires:
            - get-instance-files-latest-hawaii
      - build-and-publish-master-hawaii:
          requires:
            - get-instance-files-latest-hawaii
      - deploy-no-to-ci:
          type: approval
          requires:
            - build-and-publish-master-noipm
            - test-server-and-worker-ci-noipm
            - test-pact-noipm
            - test-client-noipm
      - deploy-ci-noipm:
          requires:
            - deploy-no-to-ci
      - deploy-ci-hawaii:
          requires:
            - build-and-publish-master-hawaii
            - test-server-and-worker-ci-hawaii
            - test-pact-hawaii
            - test-client-hawaii
      - ensure-ci-deploy-succeeded:
          name: ensure-ci-noipm-deploy-succeeded
          requires:
            - deploy-ci-noipm
      - ensure-ci-deploy-succeeded:
          name: ensure-ci-hawaii-deploy-succeeded
          requires:
            - deploy-ci-hawaii
      - letter-generation-testing-ci:
          requires:
            - ensure-ci-noipm-deploy-succeeded
      # - letter-generation-ci-latency-check:
      #     requires:
      #       - letter-generation-testing-ci
      - e2e-testing-ci-pdm-noipm:
          requires:
            - letter-generation-testing-ci
      - e2e-testing-ci-pdm-hawaii:
          requires:
            - ensure-ci-hawaii-deploy-succeeded
      - create-release:
          type: approval
          requires:
            - e2e-testing-ci-pdm-noipm
            - e2e-testing-ci-pdm-hawaii
      - bump-version:
          requires:
            - create-release
      - tag-instance-files-noipm:
          requires:
            - bump-version
      - tag-instance-files-hawaii:
          requires:
            - bump-version
      - build-and-publish-app-staging-noipm:
          requires:
            - tag-instance-files-noipm
      - build-and-publish-app-staging-hawaii:
          requires:
            - tag-instance-files-hawaii
      - build-and-publish-production-noipm:
          requires:
            - tag-instance-files-noipm
      - build-and-publish-production-hawaii:
          requires:
            - tag-instance-files-hawaii
      - push-tag:
          requires:
            - build-and-publish-app-staging-noipm
            - build-and-publish-production-noipm
            - build-and-publish-app-staging-hawaii
            - build-and-publish-production-hawaii

  build_and_deploy_playground:
    jobs:
      - security-check:
          filters:
            branches:
              only:
                - lighthouse
      - get-instance-files-latest-noipm:
          requires:
            - security-check
      - lighthouse:
          requires:
            - get-instance-files-latest-noipm
      - test-client-noipm:
          requires:
            - get-instance-files-latest-noipm
      - test-server-handlers-ci:
          requires:
            - get-instance-files-latest-noipm
      - test-server-worker-non-handlers:
          requires:
            - get-instance-files-latest-noipm
      - build-and-publish-playground:
          requires:
            - test-client-noipm
            - test-server-worker-non-handlers
            - test-server-handlers-ci
      - deploy-playground:
          requires:
            - build-and-publish-playground
      - ensure-playground-deploy-succeeded:
          requires:
            - deploy-playground
      - e2e-testing-playground:
          requires:
            - ensure-playground-deploy-succeeded

  deploy_release_noipm:
    jobs:
      - get-instance-files-release-noipm:
          filters:
            branches:
              only:
                - /release_v.*/
      - deploy-noipm-to-staging:
          type: approval
          requires:
            - get-instance-files-release-noipm
      - deploy-staging-noipm:
          requires:
            - deploy-noipm-to-staging
      - ensure-staging-deploy-succeeded:
          requires:
            - deploy-staging-noipm
      - e2e-testing-staging:
          requires:
            - ensure-staging-deploy-succeeded
      - hold-for-production:
          type: approval
          requires:
            - e2e-testing-staging
      - deploy-production-noipm:
          requires:
            - hold-for-production
      - ensure-production-deploy-succeeded-noipm:
          requires:
            - deploy-production-noipm

  deploy_release_hawaii:
    jobs:
      - get-instance-files-release-hawaii:
          filters:
            branches:
              only:
                - /release_v.*/
      - deploy-staging-hawaii:
          requires:
            - get-instance-files-release-hawaii
      - ensure-staging-deploy-succeeded:
          requires:
            - deploy-staging-hawaii
      - e2e-testing-staging:
          requires:
            - ensure-staging-deploy-succeeded
      # - hold-for-production:
      #     type: approval
      #     requires:
      #       - e2e-testing-staging
      # - deploy-production-hawaii:
      #     requires:
      #       - hold-for-production
      # - ensure-production-deploy-succeeded-hawaii:
      #     requires:
      #       - deploy-production-hawaii
