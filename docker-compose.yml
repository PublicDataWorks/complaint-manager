version: "3"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.web
      args:
        - REACT_APP_ENV=static_development
        - REACT_APP_GOOGLE_API_KEY
    environment:
      - NODE_ENV=development
      - REACT_APP_ENV=development
      - NEW_RELIC_ENABLED=false
      - NEW_RELIC_NO_CONFIG_FILE=true
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - REACT_APP_GOOGLE_API_KEY
      - USE_CLOUD_SERVICES=false
      - REACT_APP_USE_CLOUD_SERVICES=false
    depends_on:
      - db
      - worker
      - create-search-index
    ports:
      - "1234:1234"
      - "443:443"
      - "4000:4000"
#      Expose this port if using Node inspect flag for debugging purposes
#     - "9229:9229"
    entrypoint: ["./wait-for-it.sh", "db:5432", "--"]
    command: ["yarn", "start:dev"]
    volumes:
#      Mount this volume if you want to run a static front end on localhost:1234
#      - ./build:/app/build
      - ./src:/app/src
#      Mount this volume only if you have NOT set INSTANCE_FILES_DIR locally
#      - /app/src/instance-files/
      - ./scripts:/app/scripts
      - ./package.json:/app/package.json
      - ./config-overrides.js:/app/config-overrides.js
      - ./snapshotResolver.js:/app/snapshotResolver.js
      - ./localstack-seed-files:/app/localstack-seed-files
#      Mount this volume only if you have set INSTANCE_FILES_DIR locally
      - ${INSTANCE_FILES_DIR}:/app/src/instance-files
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - 9200:9200
      - 9300:9300
  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME-localstack}"
    image: localstack/localstack:0.12.7
    hostname: localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,secretsmanager
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOST_TMP_FOLDER=${TMPDIR}
      - USE_SSL=false
    volumes:
      - ./data:/tmp/localstack
  app-e2e:
    build:
      context: .
      dockerfile: Dockerfile.web
      args:
        - REACT_APP_ENV=static_development
        - REACT_APP_GOOGLE_API_KEY
    environment:
      - NODE_ENV=development
      - REACT_APP_ENV=development_e2e
      - NEW_RELIC_ENABLED=false
      - NEW_RELIC_NO_CONFIG_FILE=true
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - REACT_APP_GOOGLE_API_KEY
      - USE_CLOUD_SERVICES=false
      - REACT_APP_USE_CLOUD_SERVICES=false
    depends_on:
      - db
      - worker
    ports:
      - "1234:1234"
      - "443:443"
      - "4000:4000"
    entrypoint: ["./wait-for-it.sh", "db:5432", "--"]
    command: ["yarn", "start:dev"]
    volumes:
      - ./src:/app/src
#      Mount this volume only if you have NOT set INSTANCE_FILES_DIR locally
#      - /app/src/instance-files/
      - ./scripts:/app/scripts
      - ./package.json:/app/package.json
      - "./e2e/.env.development:/app/.env.development"
#      Mount this volume only if you have set INSTANCE_FILES_DIR locally
      - ${INSTANCE_FILES_DIR}:/app/src/instance-files
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - NODE_ENV=development
      - NEW_RELIC_ENABLED=false
      - NEW_RELIC_NO_CONFIG_FILE=true
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - USE_CLOUD_SERVICES=false
      - REACT_APP_USE_CLOUD_SERVICES=false
    depends_on:
      - db
      - redis
    ports:
      - "4567:4567"
      - "5000:5000"
    entrypoint: ["./wait-for-it.sh", "db:5432", "--"]
    command: ["yarn", "start:worker:dev"]
    volumes:
      - ./src:/app/src
#      Mount this volume only if you have NOT set INSTANCE_FILES_DIR locally
#      - /app/src/instance-files/
      - ./package.json:/app/package.json
      - ./node_modules:/app/node_modules
#      Mount this volume only if you have set INSTANCE_FILES_DIR locally
      - ${INSTANCE_FILES_DIR}:/app/src/instance-files
  db:
    image: postgres:10.9-alpine
    depends_on:
      - localstack
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
  e2e:
    image: noipm/e2e:latest
    depends_on:
      - app-e2e
    volumes:
      - "./e2e/tests:/e2e/tests"
      - "./e2e/pageObjectModels:/e2e/pageObjectModels"
      - "./wait-for-it.sh:/wait-for-it.sh"
    entrypoint: ["./wait-for-it.sh", "app-e2e:443", "-t", "120", "--"]
    environment:
      - TEST_USER=${TEST_USER}
      - TEST_PASS=${TEST_PASS}
  redis:
    image: redis
    ports:
      - "6379:6379"
  schemaspy:
    image: schemaspy/schemaspy:latest
    depends_on:
      - db
    volumes:
      - "./schemaspy/noipm-db/output:/output"
      - "./schemaspy/noipm-db/schemaspy.properties:/schemaspy.properties"
  security-checks:
    image: hawkeyesec/scanner-cli:latest
    volumes:
      - ".:/target"
    working_dir: "/target"
    entrypoint: ["/bin/sh"]
    command: ["./scripts/security-checks.sh"]
  create-search-index:
    image: noipm/docker-node-ubuntu:2.0.1
    depends_on:
      - db
      - elasticsearch
    volumes:
      - ".:/target"
    working_dir: "/target"
    entrypoint: ["./wait-for-it.sh", "db:5432", "elasticsearch:9200", "--"]
    command: ["npx", "babel-node", "./scripts/search/create-search-index.js"]
